from aiogram import types
import datetime
from data.config import *
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from data import loader, config
from database import db
from states.classes_states import *
from keyboards import admin_kb
from constants.constants import *
from functions.admin_functions import *
import re
import json
import random


dp = Router()
bot = loader.start_bot(config.Token)

@dp.message(AddChat.q1)
async def add_chat_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    channel_id = data.get('channel_id')

    try:
        chat_id = message.chat_shared.chat_id
        chat_member = await bot.get_chat_member(chat_id, bot.id)
    except Exception as ex:
        await message.answer(
            '''<b>‚ùå –û—à–∏–±–∫–∞!</b>\n\n- –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n- –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ —á–∞—Ç–∞, –∞ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞.\n\n<b>‚ÑπÔ∏è –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫:</b>\n1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞, –∞ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n<b>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Ä–∞–∑–¥–µ–ª–µ üõ†Ô∏è –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞! </b>''',
            reply_markup=admin_kb.start_menu_for_admins())
        await state.clear()
        return

    if chat_member.status in ['administrator', 'creator']:
        await message.answer(
            text='''<b>‚úÖ –ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ –¥–ª—è –±–∞—Ç–ª–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç. –õ—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∞ —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞—à–µ–º—É –±–æ—Ç—É!''', reply_markup=admin_kb.start_menu_for_admins()
        )

        await db.uopdate_admin_chat_by_chat_id(channel_id, chat_id)
        await state.clear()
    else:
        await message.answer(
    '''<b>‚ùå –û—à–∏–±–∫–∞!</b>\n\n- –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n- –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ —á–∞—Ç–∞, –∞ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞.\n\n<b>‚ÑπÔ∏è –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫:</b>\n1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞, –∞ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n<b>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —Ä–∞–∑–¥–µ–ª–µ üõ†Ô∏è –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞! </b>''', reply_markup=admin_kb.start_menu_for_admins())
        await state.clear()

@dp.message(AddBattleName.q1)
async def add_battle_name(message: types.Message, state: FSMContext):
    battle_name = message.text
    data = await state.get_data()
    battle_id = data['battle_id']
    battle_info = await db.check_battle_info(battle_id)
    await db.update_battle_name_by_battle_id(battle_id, battle_name)
    if battle_info[23] == 2:
        await battle_answer_func_message(message, battle_id, state)
    else:
        await battle_one_message(message, battle_id)
    await state.clear()

    await bot.delete_message(message.chat.id, message.message_id)
    await bot.delete_message(message.chat.id, message.message_id - 1)

@dp.message(AddLinkToBattle.q1)
async def add_link_to_battle(message: types.Message, state: FSMContext):
    battle_link = message.text
    data = await state.get_data()
    battle_id = data['battle_id']
    await db.update_link_by_battle_id(battle_id, battle_link)
    await battle_answer_func_message(message, battle_id, state)
    await state.clear()


@dp.message(AddBattleLinkChannel.q1)
async def add_battle_channel_link(message: types.Message, state: FSMContext):
    battle_link = message.text
    data = await state.get_data()
    battle_id = data['battle_id']
    if battle_link.startswith('https://'):
        await db.update_battle_channel_link_by_battle_id(battle_id, battle_link)
        await battle_answer_func_message(message, battle_id, state)
        await state.clear()
    else:
        await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=await back_main_menu_create_battle(battle_id))
@dp.message(AddBattleLinkPost.q1)
async def add_battle_post_link(message: types.Message, state: FSMContext):
    battle_link = message.text
    data = await state.get_data()
    battle_id = data['battle_id']
    if battle_link.startswith('https://'):
        await db.update_battle_post_link_by_battle_id(battle_id, battle_link)
        await battle_answer_func_message(message, battle_id, state)
        await state.clear()
    else:
        await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=await back_main_menu_create_battle(battle_id))
@dp.message(AddBattlePrize.q1)
async def add_battle_prize(message: types.Message, state: FSMContext):
    prize = message.text
    data = await state.get_data()
    battle_id = data['battle_id']
    battle_info = await db.check_battle_info(battle_id)
    await db.update_battle_prize(battle_id, prize)
    if battle_info[23] == 2:
        await battle_answer_func_message(message, battle_id, state)
    else:
        await battle_one_message(message, battle_id)
    await state.clear()

    await bot.delete_message(message.chat.id, message.message_id)
    await bot.delete_message(message.chat.id, message.message_id - 1)

@dp.message(AddBattleDescr.q1)
async def add_battle_descr(message: types.Message, state: FSMContext):
    descr = message.text
    data = await state.get_data()
    battle_id = data['battle_id']
    await db.update_battle_description(battle_id, descr)
    await battle_answer_func_message(message, battle_id, state)
    await state.clear()
    
@dp.message(AddActiveBattleDescr.q1)
async def add_active_battle_descr(message: types.Message, state: FSMContext):
    descr = message.text
    data = await state.get_data()
    battle_id = data['battle_id']
    await db.update_battle_description(battle_id, descr)
    await active_battle_answer_func(message, battle_id)
    await state.clear()
  
@dp.message(AddBattleStart.q1)
async def add_battle_start_time(message: types.Message, state: FSMContext):
    time_text = message.text
    time_pattern = r"^(?:[01]\d|2[0-3]):[0-5]\d$"

    if not re.match(time_pattern, time_text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30.")
        return

    try:
        valid_time = datetime.datetime.strptime(time_text, '%H:%M').time()
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30.")
        return

    data = await state.get_data()
    battle_id = data['battle_id']
    await db.update_battle_start(battle_id, time_text)
    await battle_answer_func_message(message, battle_id, state)
    await state.clear()

@dp.message(AddActiveBattleEnd.q1)
async def add_active_battle_end_time(message: types.Message, state: FSMContext):
    time = message.text
    data = await state.get_data()
    battle_id = data['battle_id']
    round = data.get('round')
    await db.update_end_round_battle(battle_id, time)
    if round is None:
        await active_battle_answer_func(message, battle_id)
    else:
        await firstround_menu_setting(message, battle_id)
    await state.clear()

    await bot.delete_message(message.chat.id, message.message_id)
    await bot.delete_message(message.chat.id, message.message_id - 1)

@dp.message(AddActiveBattleParticipants.q1)
async def add_active_battle_participants(message: types.Message, state: FSMContext):
    participants = message.text
    data = await state.get_data()
    battle_id = data['battle_id']
    round = data.get('round')
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
    if participants.isdigit():
        if int(participants) < 2 or int(participants) > 10:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2—Ö –¥–æ 10", reply_markup=await back_battle__active_setting_kb(battle_id))
            return
        
        await db.update_round_users_battle(battle_id, participants)
        if round is None:
            await active_battle_answer_func(message, battle_id)
        else:
            await firstround_menu_setting(message, battle_id)
        await state.clear()
    else:
        await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=await back_battle__active_setting_kb(battle_id))

@dp.message(AddVoicesToWin.q1)
async def add_voices_to_win(message: types.Message, state: FSMContext):
    voices = message.text
    data = await state.get_data()
    battle_id = data['battle_id']
    battle_info = await db.check_battle_info(battle_id)
    round = data.get('round')
    if voices.isdigit():
        if int(voices) < 1:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1", reply_markup=await back_battle__active_setting_kb(battle_id))
            return
        await db.update_min_golos_battle(battle_id, voices)
        if round is None:
            await active_battle_answer_func(message, battle_id)
        else:
            if battle_info[23] == 2:
                await firstround_menu_setting(message, battle_id)
            else:
                await battle_one_message(message, battle_id)
        await state.clear()
    else:
        await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=await back_battle__active_setting_kb(battle_id))
    await bot.delete_message(message.chat.id, message.message_id)
    await bot.delete_message(message.chat.id, message.message_id - 1)

@dp.message(SetTextToPublish.post_text)
async def SetTextToPublish_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    battle_id = data.get('battle_id')
    battle_info = await db.check_battle_info(battle_id)
    textSave = message.html_text or message.text
    await db.update_battle_prize(battle_id, textSave)
    await bot.delete_message(message.chat.id, message_id=message.message_id - 1)
    await bot.delete_message(message.chat.id, message_id=message.message_id)
    await state.clear()
    battle_info_text = '<b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>'
    await message.answer(battle_info_text, disable_web_page_preview=True,
                                 reply_markup=await active_battle_settings_kb(battle_id, 3))

@dp.message(AddBattlePost.q1)
async def add_battle_post(message: types.Message, state: FSMContext):
    data = await state.get_data()
    battle_id = data.get('battle_id')
    await state.update_data(message="empty")
    battle_info = await db.check_battle_info(battle_id)
    post_id = message.message_id
    await bot.delete_message(message.chat.id, message.message_id - 1)
    await db.update_post_id(post_id, battle_id)
    if battle_info[23] == 2:
        await battle_answer_func_message(message, battle_id, state)
    else:
        await battle_one_message(message, battle_id)
        await state.clear()

@dp.message(DeleteBattleFromDB.password)
async def deleteBattleFromDB(message: types.Message, state: FSMContext):
    await message.delete()
    if message.text != '1234':
        await message.answer('–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        await state.set_state(DeleteBattleFromDB.password)
        return

    data = await state.get_data()
    battle_id = data.get('battle_id')
    await state.clear()
    await db.delete_battle_by_id(battle_id)
    await bot.edit_message_text(text='–ë–∞—Ç–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', chat_id=message.chat.id, message_id=message.message_id - 1)

@dp.callback_query(lambda c: c.data.startswith('admitPostData'))
async def admitPostData(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    battle_id = data.get('battle_id')
    message = data.get('message')
    post_id = message.message_id
    await call.message.delete()
    await db.update_post_id(post_id, battle_id)
    await battle_answer_func_message(message, battle_id, state)

@dp.callback_query(lambda c: c.data.startswith('accessCreatePostVote'))
async def accessCreatePostVote(call: types.CallbackQuery, state: FSMContext):
    data = json.loads(call.data.split(';')[1])
    battle_id = data.get('battle_id')
    await state.update_data(battle_id=battle_id)
    await call.message.edit_text('<b>‚öôÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ –Ω–∞–±–æ—Ä–µ —Ñ–æ—Ç–æ –Ω–∞ –±–∞—Ç–ª.</b>\n\n‚ö†Ô∏è–¢–≥ –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è', reply_markup=await back_main_menu_create_battle(battle_id))
    await state.set_state(AddBattlePost.q1)

@dp.callback_query(lambda c: c.data.startswith('declineCreatePostVote'))
async def declineCreatePostVote(call: types.CallbackQuery, state: FSMContext):
    data = json.loads(call.data.split(';')[1])
    post_id = data.get('post_id')
    battle_id = data.get('battle_id')
    battle_info = await db.check_battle_info(battle_id)
    await call.message.edit_text(f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –±–∞—Ç–ª: https://t.me/{bot_name}?start=b{battle_id}\n\n'
                            f'‚ÑπÔ∏è<b>–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –ø–æ—Å—Ç–µ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Ñ–æ—Ç–æ, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ</b>')
    await db.update_post_id(post_id, battle_id)
    if battle_info[23] == 2:
        await battle_answer_func_message(call.message, battle_id, state)
    else:
        await state.clear()
        await battle_one_message(call.message, battle_id)

@dp.message(AddFakePhoto.q1)
async def add_fake_photo(message: types.Message, state: FSMContext):
    data = await state.get_data()
    battle_id = data['battle_id']
    if message.photo:
        photo = message.photo[-1].file_id
        random_tg_id = random.randint(1000000000, 9999999999)
        photo_battle_id = await db.add_battle_photo(random_tg_id, battle_id, photo)
        await db.battle_photos_status_by_id(photo_battle_id, 1)
        await message.answer('—Ñ–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
        await active_battle_answer_func(message, battle_id)
    else:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ', reply_markup=await back_battle__active_setting_kb(battle_id))