from aiogram import types
import datetime
from data.config import *
from aiogram import types
from aiogram.fsm.context import FSMContext
from data import loader, config
from database import db
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.another import back_main_menu_add_channel, back_main_menu_channels, back_main_menu_create_battle, create_battle_kb, create_good
from states.classes_states import *
from constants.constants import *
import json

bot = loader.start_bot(config.Token)

def back_main_menu_add_channel2(channed_id):
    kb = InlineKeyboardBuilder()
    kb.button(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'approvedelete;{channed_id}')
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'backtosettings;{channed_id}')
    kb.adjust(1)
    return kb.as_markup()
def back_main_menu_add_channel3(channed_id):
    kb = InlineKeyboardBuilder()
    kb.button(
        text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data=f'2approvedelete;{channed_id}'
    )
    kb.button(
        text='üîô –ù–∞–∑–∞–¥', callback_data='backtochannels'
    )
    kb.adjust(1)
    return kb.as_markup()

#–∫–Ω–æ–ø–∫–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç–ª–∞
def back_main_menu_channels(channels):
    kb = InlineKeyboardBuilder()
    for chan in channels:
        name = chan[3]
        id = chan[0]
        kb.button(text=name, callback_data=f'optionchannel;{id}')
    else:
        kb.button(text='–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='addchannel')
        kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data='backmainmenu')
    kb.adjust(1)
    return kb.as_markup()

async def active_battles_kb(battles):
    print(battles)
    kb = InlineKeyboardBuilder()
    for battle in battles:
        name = battle[3]
        id = battle[0]
        kb.button(
        text=name, callback_data=f'optionactivebattle;{id}')
    kb.button(text='üîô –í –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –±–∞—Ç–ª–æ–≤', callback_data='backmainmenu')
    kb.adjust(1)
    return kb.as_markup()



async def active_battle_settings_kb(battle_id, status):
    kb = InlineKeyboardBuilder()
    battle_info = await db.check_battle_info(battle_id)
    print('current menu', status)
    if status == 0:
        status = 1
    # –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ CREATED
    if status == Status.CREATED.value:
        kb.button(text='‚úÖ –ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥', callback_data=f'activebattlesettings;start;{battle_id}')
        kb.button(text='üèû –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', callback_data=f'activebattlesettings;fake;{battle_id}')

    # –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ NEXTROUND
    if status == Status.NEXTROUND.value:
        kb.button(text='‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥', callback_data=f'activebattlesettings;next;{battle_id}')

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ CREATED –∏ NEXTROUND
    if status == Status.CREATED.value or status == Status.NEXTROUND.value:
        if battle_info[7] == "-":
            kb.button(text='‚ùå –†–∞—É–Ω–¥ –ø–æ —Å—á—ë—Ç—É', callback_data=f'activebattlesettings;descr;{battle_id}')
        else:
            kb.button(text='‚úÖ –†–∞—É–Ω–¥ –ø–æ —Å—á—ë—Ç—É', callback_data=f'activebattlesettings;descr;{battle_id}')

        if battle_info[13] == 0:
            kb.button(text='‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–æ—Å—Ç–µ', callback_data=f'activebattlesettings;participants;{battle_id}')
        else:
            kb.button(text='‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–æ—Å—Ç–µ', callback_data=f'activebattlesettings;participants;{battle_id}')

        if battle_info[15] == "-":
            kb.button(text='‚ùå –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞', callback_data=f'activebattlesettings;time;{battle_id}')
        else:
            kb.button(text='‚úÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞', callback_data=f'activebattlesettings;time;{battle_id}')

        if battle_info[11] == 0:
            kb.button(text='‚ùå –ú–∏–Ω. –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã', callback_data=f'activebattlesettings;voices;{battle_id}')
        else:
            kb.button(text='‚úÖ –ú–∏–Ω. –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã', callback_data=f'activebattlesettings;voices;{battle_id}')

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    if status == Status.ENDROUND.value:
        kb.button(text='‚≠ïÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—É–Ω–¥', callback_data=f'activebattlesettings;end;{battle_id}')
    if status == Status.Error.value:
        kb.button(text='‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=f'aprovecontinuebattleesettings;{battle_id}')

    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    kb.button(text='üîÑ', callback_data=f'activebattlesettings;reload;{battle_id}')
    kb.button(text='üóë –£–¥–∞–ª–∏—Ç—å –±–∞—Ç–ª', callback_data=f'activebattlesettings;delete;{battle_id}')

    kb.adjust(1, 2, 1, 1, 1, 1, 1)
    return kb.as_markup()





async def back_battle__active_setting_kb(battle_id):
    kb = InlineKeyboardBuilder()
    
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'optionactivebattle;{battle_id}')
    return kb.as_markup()















    

async def battle_answer_func_message(message: types.Message, battle_id,state:FSMContext):
    await state.clear()
    battle_info = await db.check_battle_info(battle_id)
    post_start_battle = battle_info[17]
    time_now = datetime.datetime.now().strftime("%H:%M")
    if post_start_battle == 0:
            post_start_battle = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    else:
            post_start_battle = f'–°–æ–∑–¥–∞–Ω'
    await message.answer(f'''<b>üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ-–±–∞—Ç–ª–∞:</b>

- –ù–∞–∑–≤–∞–Ω–∏–µ:  {battle_info[3]}
- –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {battle_info[5]}
- –ü–æ—Å—Ç –æ –Ω–∞—á–∞–ª–µ –±–∞—Ç–ª–∞: {post_start_battle}
- –ü—Ä–∏–∑: {battle_info[6]}
- –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time_now}
- –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {battle_info[9]}
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {battle_info[10]}                                                    
''', reply_markup=await create_battle_kb(battle_id, battle_info[5]), disable_web_page_preview=True)



async def battle_settings_func(callback: types.CallbackQuery, battle_id, action, state):
    battle_info = await db.check_battle_info(battle_id)
    tg_id = callback.from_user.id
    if action == 'createbattle':

        await db.update_status_battle(battle_id, 0)
        if battle_info[3] == '-'or battle_info[5] == '-' or battle_info[6] == '-' or battle_info[9] == '-' or battle_info[10] == 0 or battle_info[17] == 0:
            print(battle_info[3], battle_info[5], battle_info[6], battle_info[9], battle_info[10], battle_info[17])
            await callback.answer('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', show_alert=True)
            return
        else:

            await callback.message.delete()
            
            await callback.message.answer('<b>‚úÖ –ë–∞—Ç–ª —Å–æ–∑–¥–∞–Ω </b> \n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ‚öîÔ∏è –ù–∞–±–æ—Ä—ã –Ω–∞ —Ñ–æ—Ç–æ-–±–∞—Ç–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É')

            tg_id = callback.from_user.id
            await db.update_battle_statistic_plus_1(tg_id)
            await db.update_admin_count_minus_1(tg_id)
            channel_id = battle_info[1]
            channel_info = await db.check_channel_info_by_id(channel_id)
            channel_tg_id = channel_info[2]
            kb = InlineKeyboardBuilder()
            kb.button(text='–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', url=f'https://t.me/{config.bot_name}?start=b{battle_id}')
            try:
                print(battle_info[17])
                await bot.copy_message(chat_id=channel_tg_id, from_chat_id=callback.message.chat.id,
                                       message_id=battle_info[17], reply_markup=kb.as_markup()
                                       )
            except Exception as e:
                print(e)
                await callback.message.answer('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –æ –±–∞—Ç–ª–µ')
    if action == 'channel_link':
        await state.set_state(AddLinkToBattle.q1)
        await state.update_data(battle_id=battle_id)
        await callback.message.edit_text('<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª</b>',
                                         reply_markup=await back_main_menu_create_battle(battle_id))
    if action == 'name':
        await state.set_state(AddBattleName.q1)
        await state.update_data(battle_id=battle_id)
        await callback.message.edit_text('<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∞—Ç–ª–∞</b>', reply_markup=await back_main_menu_create_battle(battle_id))
    if action == 'prize':
        await state.set_state(AddBattlePrize.q1)
        await state.update_data(battle_id=battle_id)
        await callback.message.edit_text('<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑ –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Ñ–æ—Ç–æ-–±–∞—Ç–ª–µ:</b>', reply_markup=await back_main_menu_create_battle(battle_id))
    if action == 'end':
        await state.set_state(AddBattleEnd.q1)
        await state.update_data(battle_id=battle_id)
        await callback.message.edit_text('<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –Ω–∞–±–æ—Ä–∞ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 00:00:</b>', reply_markup=await back_main_menu_create_battle(battle_id))
    if action == 'participants':
        await state.set_state(AddBattleParticipants.q1)
        await state.update_data(battle_id=battle_id)
        await callback.message.edit_text('<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–∞—Ç–ª–∞. \n\n –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ</b>', reply_markup=await back_main_menu_create_battle(battle_id))
    if action == 'battlepost':
        await state.set_state(AddBattlePost.q1)
        await state.update_data(battle_id=battle_id)
        data_stringify = json.dumps(await state.get_data())
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data=f"accessCreatePostVote;{data_stringify}")
        kb.button(text="üö´ –ü–æ—Å—Ç –Ω–µ –Ω—É–∂–µ–Ω", callback_data=f"declineCreatePostVote;{data_stringify}")
        kb.adjust(1)
        await callback.message.edit_text('''‚öôÔ∏è –í–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –æ –Ω–∞–±–æ—Ä–µ —Ñ–æ—Ç–æ? –ò–ª–∏ –≤—ã —Å–æ–∑–¥–∞–¥–∏—Ç–µ —Å–∞–º–∏, –Ω–æ –æ–Ω–∞ –±—É–¥–µ—Ç –±–µ–∑ URL-–∫–Ω–æ–ø–∫–∏\n
    \n‚ÑπÔ∏è –ü–æ—Å—Ç –æ –Ω–∞–±–æ—Ä–µ —Å URL-–∫–Ω–æ–ø–∫–æ–π —Å–æ–±–∏—Ä–∞–µ—Ç –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ, —á–µ–º –±–µ–∑ –Ω–µ–µ''', reply_markup=kb.as_markup())


async def delete_channel_func(call: types.CallbackQuery, channel_id):
    await call.message.edit_text('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?', reply_markup= back_main_menu_add_channel3(channel_id))

async def delete_channel_func2(call: types.CallbackQuery, channel_id):
    await db.delete_channel_by_id(channel_id)
    tg_id = call.from_user.id
    channels = await db.checkk_all_channels_where_tg_id(tg_id)
    await call.message.edit_text('<b>‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω </b>', reply_markup= back_main_menu_channels(channels))




def generate_support_link(channel_id):
    base_url = f"https://t.me/{config.bot_name}?start=support_{channel_id}"  # –°—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    return base_url
	 
async def chennelsetting_func(call: types.CallbackQuery, channel_id, action, state:FSMContext):
    tg_id = call.from_user.id
    if action == 'delete':
        await call.message.edit_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª?', reply_markup=back_main_menu_add_channel2(channel_id))
    if action == 'support':
        support_link = generate_support_link(channel_id)
        await call.message.edit_text(
            f'<b>üõ†Ô∏è –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–Ω–æ–Ω–∏–º–Ω–æ:</b> \n\n{support_link}\n\n–í–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –∞–¥–º–∏–Ω-—á–∞—Ç.',reply_markup=await back_main_menu_add_channel(channel_id))
    if action == 'adminchat':
        await state.set_state(AddChat.q1)
        await state.update_data(channel_id=channel_id)
        channel_info = await db.check_channel_info_by_id(channel_id)
        await call.message.edit_text(f'''<b>‚öôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ </b>

–¢–µ–∫—É—â–∏–π ID –∞–¥–º–∏–Ω-—á–∞—Ç–∞: {channel_info[4]}

‚ÑπÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è —Ñ–æ—Ç–æ –¥–ª—è –±–∞—Ç–ª–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –õ—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∞ —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.

<b>‚ÅâÔ∏è –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω-—á–∞—Ç: </b>

1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç.
2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ —á–∞—Ç–∞. 
3. –ù–∞–∑–Ω–∞—á—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é!''', 
reply_markup=await back_main_menu_add_channel(channel_id) )
    if action == 'create':
      channel_info = await db.check_channel_info_by_id(channel_id)
      if channel_info[4] == '0'or channel_info[5] == '-' or channel_info[6] == '-':
            await call.answer('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', show_alert=True)
            return
      else:
       await call.message.edit_text(
        f'‚öôÔ∏è <b>–í–ù–ò–ú–ê–ù–ò–ï</b>\n\n'
        '–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —Ä–∞–Ω–µ–µ. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n'
        '‚ö†Ô∏è –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã, —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ–±–ª–µ–º–∞–º:\n'
        '- –§–æ—Ç–æ –º–æ–≥—É—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è;\n'
        '- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –≤–æ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª;\n'
        '- –ò –¥—Ä—É–≥–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏.\n\n'
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å—ë –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!', reply_markup=await create_good(channel_id))
    if action == 'create_good':
        battle_id = await db.create_new_battle_return_id(channel_id, tg_id)
        battle_info = await db.check_battle_info(battle_id)
        post_start_battle = battle_info[17]
        channel_info = await db.check_channel_info_by_id(channel_id)
        channel_tg_id = channel_info[5]
        time_now = datetime.datetime.now().strftime("%H:%M")

        await db.update_battle_channel_link_by_battle_id(battle_id, channel_tg_id)
        if post_start_battle == 0:
            post_start_battle = '–ù–µ –Ω—É–∂–µ–Ω'
        else:
            post_start_battle = f'–ù—É–∂–µ–Ω'
        await call.message.edit_text(f'''<b>üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ-–±–∞—Ç–ª–∞: (1 –®–ê–ì –ò–ó 2)</b>

- –ù–∞–∑–≤–∞–Ω–∏–µ:  {battle_info[3]}
- –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {channel_tg_id}
- –ü–æ—Å—Ç –æ –Ω–∞—á–∞–ª–µ –±–∞—Ç–ª–∞: {post_start_battle}
- –ü—Ä–∏–∑: {battle_info[6]}
- –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time_now}
- –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {battle_info[9]}
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {battle_info[10]}                                                    
''', reply_markup=await create_battle_kb(battle_id, channel_id), disable_web_page_preview=True)
    if action == 'channelpost':
        await state.update_data(channel_id=channel_id)
        await state.set_state(AddChannelPost.q1)
        channel_info = await db.check_channel_info_by_id(channel_id)
        await call.message.edit_text(
    "<b>‚öôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç </b>\n\n"
    f'–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: {channel_info[6]}\n\n'
    "‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n\n"
    "<b>‚ÅâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.</b>",
    reply_markup=await back_main_menu_add_channel(channel_id), disable_web_page_preview=True)

    if action == 'channellink':
        channel_info = await db.check_channel_info_by_id(channel_id)
        await state.update_data(channel_id=channel_id)
        await state.set_state(AddChannelLink.q1)
        await call.message.edit_text(
    f'<b>‚öôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª </b>\n\n'
    f'–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {channel_info[5]}\n\n'
    f'‚ÑπÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–∞—Ç–ª–∞, –∞ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞—Ç–ª–µ.\n\n'
    f'<b>‚ÅâÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–µ–≥–æ.</b>',
    reply_markup=await back_main_menu_add_channel(channel_id))

async def active_battle_func(call: types.CallbackQuery, battle_id):
    battle_info = await db.check_battle_info(battle_id)
    tg_id = call.from_user.id
    count_users_in_battle = await db.check_count_battle_photos_where_battle_id_and_status_1(battle_info[0])
    time_now = datetime.datetime.now().strftime("%H:%M:%S")
    status = battle_info[14]
    battle_info_text = f'''
<b>{battle_info[3]}</b>

–†–∞—É–Ω–¥ –ø–æ —Å—á—ë—Ç—É: {battle_info[7]}
–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {battle_info[5]}
–ü—Ä–∏–∑: {battle_info[6]}
–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –Ω–∞–±–æ—Ä–∞ —Ñ–æ—Ç–æ: {battle_info[9]}

–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞: {battle_info[15]}
–ì–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã –≤ —Ä–∞—É–Ω–¥–µ: {battle_info[11]}
–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–æ—Å—Ç–µ: {battle_info[13]}

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–∞—Ç–ª–∞: {battle_info[10]}
–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count_users_in_battle}

–í—Ä–µ–º—è: {time_now}'''
    await call.message.edit_text(battle_info_text, disable_web_page_preview=True, reply_markup=await active_battle_settings_kb(battle_id, status))

async def active_battle_answer_func(msg: types.Message, battle_id):
    battle_info = await db.check_battle_info(battle_id)
    count_users_in_battle = await db.check_count_battle_photos_where_battle_id_and_status_1(battle_info[0])
    time_now = datetime.datetime.now().strftime("%H:%M:%S")
    status = battle_info[14]
    battle_info_text = f'''
<b>{battle_info[3]}</b>

–†–∞—É–Ω–¥ –ø–æ —Å—á—ë—Ç—É: {battle_info[7]}
–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {battle_info[5]}
–ü—Ä–∏–∑: {battle_info[6]}
–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –Ω–∞–±–æ—Ä–∞ —Ñ–æ—Ç–æ: {battle_info[9]}

–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞: {battle_info[15]}
–ì–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã –≤ —Ä–∞—É–Ω–¥–µ: {battle_info[11]}
–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–æ—Å—Ç–µ: {battle_info[13]}

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–∞—Ç–ª–∞: {battle_info[10]}
–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count_users_in_battle}

–í—Ä–µ–º—è: {time_now}'''
    await msg.answer(battle_info_text, disable_web_page_preview=True, reply_markup=await active_battle_settings_kb(battle_id, status))




async def active_battle_options_func(call: types.CallbackQuery, battle_id, action, state: FSMContext):
    
    if action =='start':
        battle_info = await db.check_battle_info(battle_id)
        count_users_in_battle = await db.check_count_battle_photos_where_battle_id_and_status_1(battle_info[0])
        if int(count_users_in_battle) < int(battle_info[10]):
            await call.answer('–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, –ø–æ–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ', show_alert=True)
            return
        if battle_info[13] == 0:
            await call.answer('–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–æ—Å—Ç–µ', show_alert=True)
            return
        if battle_info[11] == 0:
            await call.answer('–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã', show_alert=True)
            return
        if battle_info[15] == '-':
            await call.answer('–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç–ª–∞', show_alert=True)
            return
        if int(count_users_in_battle) < int(battle_info[13]):
            await call.answer('–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–æ—Å—Ç–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', show_alert=True)
            return
        
        kb = InlineKeyboardBuilder()
        kb.button(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data=f'approveactivebattlesettings;{battle_id}')
        kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'optionactivebattle;{battle_id}')   
        kb.adjust(1)
        await call.message.edit_text('–ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥?', reply_markup=kb.as_markup())
    if action == 'descr':
        await call.message.edit_text('<b>‚öôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º —Ä–∞—É–Ω–¥ –ø–æ —Å—á—ë—Ç—É</b>. \n\n–ü—Ä–∏–º–µ—Ä: "1 –†–ê–£–ù–î" –∏–ª–∏ "–ü–û–õ–£–§–ò–ù–ê–õ" –∏–ª–∏ "–§–ò–ù–ê–õ"\n\n–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø–æ—Å—Ç–µ.', reply_markup=await back_battle__active_setting_kb(battle_id))
        await state.set_state(AddActiveBattleDescr.q1)
        await state.update_data(battle_id=battle_id)
    if action == 'participants':
        await call.message.edit_text('<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –≤ –æ–¥–Ω–æ–º –ø–æ—Å—Ç–µ –æ—Ç 2 –¥–æ 10.</b> \n\n–£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.', reply_markup=await back_battle__active_setting_kb(battle_id))
        await state.set_state(AddActiveBattleParticipants.q1)
        await state.update_data(battle_id=battle_id)
    if action == 'time':
        await call.message.edit_text('<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ‚Äú—Å–µ–≥–æ–¥–Ω—è –≤ 12:00"</b>\n\n–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.', reply_markup=await back_battle__active_setting_kb(battle_id))
        await state.set_state(AddActiveBattleEnd.q1)
        await state.update_data(battle_id=battle_id)
    if action =='voices':
        await call.message.edit_text('<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã –≤ —Ä–∞—É–Ω–¥–µ.</b>\n\n–ü–æ–±–µ–¥–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–±—Ä–∞–ª –º–∏–Ω–∏–º–∞–ª–∫—É –∏ –æ–±–æ–≥–Ω–∞–ª —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤.', reply_markup=await back_battle__active_setting_kb(battle_id))
        await state.set_state(AddVoicesToWin.q1)
        await state.update_data(battle_id=battle_id)
    if action =='reload':
        await active_battle_func(call, battle_id)
    if action == 'end':
        kb = InlineKeyboardBuilder()
        kb.button(text='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data=f'endapproveactivebattle;{battle_id}')
        kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'optionactivebattle;{battle_id}')   
        kb.adjust(1)
        await call.message.edit_text('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞—É–Ω–¥?', reply_markup=kb.as_markup())
    if action == 'next':
        battle_info = await db.check_battle_info(battle_id)
        count_users_in_battle = await db.check_count_battle_photos_where_battle_id_and_status_1(battle_info[0])
        if count_users_in_battle == 0:
            tg_id = call.from_user.id
            await db.update_end_battle_statistic(tg_id)
            await call.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ–¥–∏–ª')
        if count_users_in_battle == 1:
            tg_id = call.from_user.id
            await db.update_end_battle_statistic(tg_id)
            await call.message.answer('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!')
            post_info = await db.check_battle_photos_where_id(battle_id)
            user_info = await db.check_info_users_by_tg_id(post_info[1])
            username = user_info[3]
            first_name = user_info[2]
            if await db.check_battle_winner_exist_return_bool(battle_id, post_info[1]):
                pass
            else:
                await db.add_new_battle_winner(battle_id, post_info[1])
            await call.message.answer_photo(post_info[3], caption=f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {post_info[1]} \n{first_name}\n@{username}')
            return
        if battle_info[13] == 0:
            await call.answer('–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–æ—Å—Ç–µ', show_alert=True)
            return
        if battle_info[11] == 0:
            await call.answer('–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã', show_alert=True)
            return
        if battle_info[15] == '-':
            await call.answer('–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç–ª–∞', show_alert=True)
            return
        if int(count_users_in_battle) < int(battle_info[13]):
            await call.answer('–ù–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–æ—Å—Ç–µ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', show_alert=True)
            return
        kb = InlineKeyboardBuilder()
        kb.button(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data=f'approveactivebattlesettings;{battle_id}')
        kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'optionactivebattle;{battle_id}')   
        kb.adjust(1)
        await call.message.edit_text('–ù–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥?', reply_markup=kb.as_markup())
    if action == 'delete':
        kb = InlineKeyboardBuilder()
        kb.button(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data=f'secapprovedeletebattle;{battle_id}')
        kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'optionactivebattle;{battle_id}')   
        kb.adjust(1)
        await call.message.edit_text('–£–¥–∞–ª–∏—Ç—å –±–∞—Ç–ª?', reply_markup=kb.as_markup())
    if action == 'fake':
        await call.message.edit_text('<b>‚öôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –±–∞—Ç–ª.</b> \n\n –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö, –∑–∞ —Ä–∞–∑ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.', reply_markup=await back_battle__active_setting_kb(battle_id))
        await state.set_state(AddFakePhoto.q1)
        await state.update_data(battle_id=battle_id)
        return