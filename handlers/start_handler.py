from aiogram import types
import datetime
from aiogram import Bot
from data.config import *
from aiogram import types, Router
from aiogram.types import Message, InputMediaPhoto
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from data import loader, config
from database import db
from aiogram.utils.keyboard import InlineKeyboardBuilder
from functions.admin_functions import back_main_menu_channels, delete_channel_func
from handlers.admin_handler import AddVoices, Mailing, settings_channel
from keyboards.another import  cabinet_back, create_battle, faq, statics_back
from keyboards.kb import gocooperation
from keyboards.dev import channel_is_deletes, channels_dev, mailing_dev, nakrutka_menu, start_menu_for_dev, true_channels_delete
from states.classes_states import *
from keyboards import admin_kb, kb
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
import urllib.parse
import aiosqlite
from database.db import name_db
from keyboards import dev





dp = Router()
bot = loader.start_bot(config.Token)



def encode_url(accound_id):

    # –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –Ω–∞ –≤–∞—à —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID

    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –≤ Telegram
    base_url = 'https://t.me/share/url'

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç —Å –≤–∞—à–∏–º ID
    bot_url = f'https://t.me/{config.bot_name}?start={accound_id}'

    # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    text = "üëâ –ü—Ä–∏–≤–µ—Ç, –º–æ–∂–µ—à—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –º–µ–Ω—è –≤ –±–æ—Ç–µ?"

    # –ö–æ–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç–¥–µ–ª—å–Ω–æ
    encoded_bot_url = urllib.parse.quote(bot_url, safe='')
    encoded_text = urllib.parse.quote(text, safe='')

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
    full_url = f"{base_url}?url={encoded_bot_url}&text={encoded_text}"
    return full_url









#–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
async def check_sub_cahnnels(channels, user_id):
    for channel in channels:
        chat_member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
        
        if chat_member.status in ['left', 'kicked']:
            return False
    return True

def subscribe_kb(chat_url, accound_id = 0):
    first_time_kb = [[InlineKeyboardButton(text="–ö–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞", url=chat_url)],
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"subcribed;{accound_id}")], ]

    keyboard_main = InlineKeyboardMarkup(inline_keyboard=first_time_kb)
    return keyboard_main

def get_my_voice_kb(id):
    first_time_kb = [[InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data=f"getmyvoice;{id}")], ]

    keyboard_main = InlineKeyboardMarkup(inline_keyboard=first_time_kb)
    return keyboard_main










#–ö–û–ú–ê–ù–î–ê /START
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.clear()
        tg_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        await db.add_user_if_not_exist(tg_id, first_name, username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if tg_id in admins:
            await message.answer(
                "<b>‚öôÔ∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω):</b>", reply_markup=start_menu_for_dev())
            return

        admin_exist = await db.check_admin_exist_return_bool(tg_id)
        if admin_exist:
            await message.answer("<b>‚öôÔ∏è –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>", reply_markup=admin_kb.start_menu_for_admins())
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã /start
        accound_id = message.text.split()
        print(accound_id)
        try:
            if len(accound_id) > 1:
                accound_id = accound_id[1]

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ "support_"
                if accound_id.startswith("support_"):
                    channel_id = accound_id.split("_")[1] 
                    channel_info = await db.check_channel_info_by_id(channel_id)
                    name = channel_info[3] 
                    await state.update_data(channel_id=channel_id)
                    await message.answer(f"üí¨ <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, @{username}!</b>\n\n"
                        f"–í—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∞–Ω–∞–ª–∞ <b>{name}.</b>\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.",
                        parse_mode="HTML")
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
                    await state.set_state(waiting_for_answers.q3)
                    return

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –±–∞—Ç–ª–∞–º–∏
                if accound_id.startswith('b'):
                    battle_id = accound_id[1:]
                    is_user_blocked = await db.check_battle_block_battle_id_tg_id_exist_return_bool(
                        battle_id, message.from_user.id)
                    if is_user_blocked:
                        await message.answer('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –±–∞—Ç–ª–µ')
                        return

                    battle_info = await db.check_battle_info(battle_id)
                    if battle_info[21] == 0:
                        await message.answer('‚ùå –ù–∞–±–æ—Ä —Ñ–æ—Ç–æ –ø–æ–∫–∞ —á—Ç–æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
                        return

                    is_user_exist = await db.check_battle_where_battle_id_and_tg_id_exist_and_status_1_return_bool(
                        battle_id, message.from_user.id)
                    if is_user_exist:
                        await message.answer('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –±–∞—Ç–ª–µ')
                        return

                    await state.set_state(SendPhotoForBattle.q1)
                    await state.update_data(battle_id=battle_id)
                    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –Ω–µ—Å–µ—Ç 18+ –∏ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞')
                    return

                if accound_id.startswith('vote'):
                    # —Ç—É—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

                    current_page = None
                    for i in range(len(accound_id)):
                        if accound_id[i] == 'p':
                            current_page = accound_id[i::]
                            break
                    current_page = int(current_page.replace('page', '', 1)) # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏

                    '''
                    –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–æ—Å—Ç–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–æ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—É–Ω–¥–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 2+ —Ñ–æ—Ç–æ
                    –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–ª —Ä–∞–∑–Ω—ã–µ –ø–æ—Å—Ç—ã, –Ω–æ —Å–æ–∑–¥–∞–ª –ø–∞–≥–∏–Ω–∞—Ü–∏—é, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    '''
                    battle_id = accound_id.replace('vote', '', 1)
                    for i in range(len(battle_id)):
                        if battle_id[i] == 'p':
                            battle_id = battle_id[0:i]
                            break

                    print(battle_id)

                    battle_info = await db.check_battle_info(battle_id)
                    print(battle_info)
                    available_count_photo_in_post = battle_info[13]

                    media = await db.all_photo_by_battle(battle_id)
                    print(media)

                    current_media = []
                    for i in range((current_page - 1) * available_count_photo_in_post,
                                   current_page * available_count_photo_in_post):
                        current_media.append(media[i])

                    channel_id = battle_info[1]
                    channel_info = await db.check_channel_info_by_id(channel_id)
                    channel_tg_id = channel_info[2]
                    members_in_post = battle_info[13]
                    all_battle_users = await db.check_all_battle_photos_where_status_1_and_battle_id(battle_id)
                    posts = [all_battle_users[i:i + members_in_post] for i in
                             range(0, len(all_battle_users), members_in_post)]

                    print(posts)

                    count = 0

                    for index, post in enumerate(posts):
                        post = current_media
                        count += 1
                        media_group = []
                        for user in current_media:
                            media_photo = InputMediaPhoto(media=user[3])
                            media_group.append(media_photo)
                            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        kbr = InlineKeyboardBuilder()
                        kbr.button(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', callback_data=f'reloadresults;{battle_id};'
                                                                               f'{available_count_photo_in_post};{current_page}')
                        for i, user in enumerate(post, start=1):
                            if i == 1:
                                emoji = '1Ô∏è‚É£'
                            if i == 2:
                                emoji = '2Ô∏è‚É£'
                            if i == 3:
                                emoji = '3Ô∏è‚É£'
                            if i == 4:
                                emoji = '4Ô∏è‚É£'
                            if i == 5:
                                emoji = '5Ô∏è‚É£'
                            if i == 6:
                                emoji = '6Ô∏è‚É£'
                            if i == 7:
                                emoji = '7Ô∏è‚É£'
                            if i == 8:
                                emoji = '8Ô∏è‚É£'
                            if i == 9:
                                emoji = '9Ô∏è‚É£'
                            if i == 10:
                                emoji = 'üîü'
                            kbr.button(text=f'{emoji} - {user[4]}', callback_data=f"voteby;{battle_id};{user[0]}")
                        kbr.adjust(1,2,3,4)
                        break
                    print('accid', accound_id)
                    await bot.send_media_group(chat_id=message.chat.id, media=media_group)

                    await bot.send_message(chat_id=message.chat.id, text="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", reply_markup=kbr.as_markup())

                    return

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                battle_photos_info = await db.check_battle_photos_where_id1(accound_id)
                battle_id = battle_photos_info[2]
                is_exist = await db.check_battle_voices_tg_id_exist_return_bool(tg_id, battle_id)
                if is_exist:
                    await message.answer('<b>üö´ –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ</b>')
                    return

                battle_info = await db.check_battle_info(battle_id)
                channel_link = battle_info[5]
                channel_id = battle_info[1]
                channel_info = await db.check_channel_info_by_id(channel_id)
                channel_tg_id = [channel_info[2]]

                if await check_sub_cahnnels(channel_tg_id, message.from_user.id):
                    await message.answer_photo(photo=battle_photos_info[3],
                                                caption='<b>–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å? –ò–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å —É–∂–µ –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–º</b>',
                                                reply_markup=get_my_voice_kb(accound_id))
                else:
                    await message.answer("<b>–ß—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª</b>",
                                         reply_markup=subscribe_kb(channel_link, accound_id))
                return

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            accound_id = 0
            await message.answer("üèò –ú–µ–Ω—é", reply_markup=kb.start_menu_for_users())
            return

        # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n\n"
            "üìñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å <a href='https://telegra.ph/Polzovatelskoe-soglashenie-kan–∞–ª–∞-PhotoBattliys-10-05'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º</a> –∏ "
            "<a href='https://telegra.ph/Politika-konfidencialnosti-kanala-PhotoBattliys-10-05'>–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>.\n\n"
            "<b>üí¨ –ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>",
            reply_markup=kb.start_menu_for_users(),
            parse_mode='HTML',
            disable_web_page_preview=True)      

@dp.callback_query(lambda c: c.data.startswith('voteby'))
async def vote_in_battle(callback: types.CallbackQuery):
    tg_id = callback.message.from_user.id

    data = callback.data.split(';')
    battle_id = data[1]
    accound_id = data[2]
    battle_photos_info = await db.check_battle_photos_where_id1(accound_id)
    battle_id = battle_photos_info[2]
    is_exist = await db.check_battle_voices_tg_id_exist_return_bool(tg_id, battle_id)
    if is_exist:
        await callback.message.answer('<b>üö´ –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ</b>')
        return

    battle_info = await db.check_battle_info(battle_id)
    channel_link = battle_info[5]
    channel_id = battle_info[1]
    channel_info = await db.check_channel_info_by_id(channel_id)
    channel_tg_id = [channel_info[2]]

    if await check_sub_cahnnels(channel_tg_id, callback.message.from_user.id):
        await callback.message.answer_photo(photo=battle_photos_info[3],
                                   caption='<b>–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å? –ò–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å —É–∂–µ –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–º</b>',
                                   reply_markup=get_my_voice_kb(accound_id))
    else:
        await callback.message.answer("<b>–ß—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª</b>",
                             reply_markup=subscribe_kb(channel_link, accound_id))
    return


#–í–ö–õ–ê–î–ö–ê üß± –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ç–æ-–±–∞—Ç–ª
@dp.message(lambda message: message.text == "üß± –°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ç–æ-–±–∞—Ç–ª")    
async def handle_profile(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.clear()
        tg_id = message.from_user.id
        admin_exist = await db.check_admin_exist_return_bool(tg_id)
        if admin_exist or tg_id in admins:
         await message.answer(
                "<b>–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ-–±–∞—Ç–ª–∞:</b>",
                reply_markup=create_battle())
         return
        await message.answer(
            "<b>üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.</b>")
        return
#–∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞—Ç—å –±–∞—Ç–ª
@dp.callback_query(lambda c: c.data.startswith('create_battle'))
async def go_create_battle(call: types.CallbackQuery):
    print('–°–æ–∑–¥–∞–Ω–∏–µ –±–∞—Ç–ª–∞')
    tg_id = call.from_user.id
    channels = await db.checkk_all_channels_where_tg_id(tg_id)
    await call.message.edit_text('<b> ‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ-–±–∞—Ç–ª–∞:</b>', reply_markup=back_main_menu_channels(channels))

#–∫–Ω–æ–ø–∫–∞ –ø—Ä–∏—Å—Ç—É–ø–∏–º    
@dp.callback_query(lambda c: c.data.startswith('backmainmenu'))
async def back_from_create_battle(call: types.CallbackQuery):
    await call.message.edit_text('<b>–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ-–±–∞—Ç–ª–∞:</b>', reply_markup=create_battle())
    
#–∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞    
@dp.callback_query(lambda c: c.data.startswith('backtochannels'))
async def back_from_create_battle(call: types.CallbackQuery):
    tg_id = call.from_user.id
    channels = await db.checkk_all_channels_where_tg_id(tg_id)
    await call.message.edit_text('<b> ‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ-–±–∞—Ç–ª–∞:</b>', reply_markup=back_main_menu_channels(channels))

#–∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
@dp.callback_query(lambda c: c.data.startswith('back_from_addchannel'))
async def go_create_battle(call: types.CallbackQuery):
    tg_id = call.from_user.id
    channels = await db.checkk_all_channels_where_tg_id(tg_id)
    await call.message.edit_text('<b> ‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ-–±–∞—Ç–ª–∞: </b>', reply_markup=back_main_menu_channels(channels))

#–í–ö–õ–ê–î–ö–ê ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ
@dp.message(lambda message: message.text == "ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ")    
async def handle_profile(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.clear()
        tg_id = message.from_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
        if tg_id in admins:
            await message.answer(
                "<b>üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.</b>")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω
        admin_exist = await db.check_admin_exist_return_bool(tg_id)
        if admin_exist:
            await message.answer(
                "<b>üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É.</b>")
            return
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(f"""
<b>–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º üì∏</b>

–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –±–∞—Ç–ª—ã –ø—Ä–æ—â–µ –∏ —É–¥–æ–±–Ω–µ–µ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏!

<b>‚ú® –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ:</b>  
                         
- –ü—Ä–∏–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ   
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –∏ –∏—Ç–æ–≥–æ–≤ 
- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ö–æ–¥–µ –±–∞—Ç–ª–∞ 

<b>–£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –±–∞—Ç–ª–æ–≤. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? üëå</b>
""", reply_markup=gocooperation(), parse_mode="HTML")



#–í–ö–õ–ê–î–ö–ê üßë‚Äçüíº –ö–∞–Ω–∞–ª—ã
@dp.message(lambda message: message.text == "üßë‚Äçüíº –ö–∞–Ω–∞–ª—ã")    
async def handle_profile(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.clear()
        tg_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
        if tg_id in admins:
            channels, total_moments = await get_paginated_items34(0)
            items_kb = await build_items_kb34(channels, 0, total_moments)  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã, –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            await message.answer(
                "<b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –±–æ—Ç–∞:</b>",
                reply_markup=items_kb.as_markup())  
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω
        admin_exist = await db.check_admin_exist_return_bool(tg_id)
        if admin_exist:
            await message.answer(
                "<b>üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.</b>")
            return

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "<b>üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.</b>")
        return

ITEMS_PER_PAGE = 10
    
async def get_paginated_items34(page: int = 0):
    channels = await db.check_all_channels()
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    return channels[start:end], len(channels)

async def build_items_kb34(channels, page, total_moments):
    categories_kb = InlineKeyboardBuilder()

    for channel in channels:
        channel_info = await db.check_channel_info_by_id(channel[0])
        name = channel_info[3]
        categories_kb.button(text=f"{name}", callback_data=f'channelcheckitem;{channel[0]};{page}')
   
    categories_kb.adjust(1)
    buttons = [
        InlineKeyboardButton(text='‚óÄÔ∏è', callback_data=f'battlespageitems;{page-1}'),
        InlineKeyboardButton(text=f'{page+1}/{(total_moments // ITEMS_PER_PAGE) + 1}', callback_data='current'),
        InlineKeyboardButton(text='‚ñ∂Ô∏è', callback_data=f'battlespageitems;{page+1}')
          ]
    categories_kb.row(*buttons)
    back_button = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='cancel_menu_channels')
    categories_kb.row(back_button)
    
    return categories_kb

@dp.callback_query(lambda c: c.data.startswith('channelcheckitem'))
async def battle_check_item_handler(call: types.CallbackQuery):
    channel_id = call.data.split(';')[1]
    kb = InlineKeyboardBuilder()
    channel_info = await db.check_channel_info_by_id(channel_id)
    name = channel_info[3]  
    link = channel_info[5]
    print(channel_id)
    kb.button(text='‚öîÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –Ω–∞ —Ñ–æ—Ç–æ-–±–∞—Ç–ª—ã', callback_data=f'channel_battles;{channel_id}')
    kb.button(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data=f'channel_delete;{channel_id}')
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'backtochannel_list')
    kb.adjust(1)
    await call.message.edit_text(f'''<b>–ö–∞–Ω–∞–ª {name}</b>\n\n–°—Å—ã–ª–∫–∞: {link}''',disable_web_page_preview=True, reply_markup=kb.as_markup())

# –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –Ω–æ–ª—å
@dp.callback_query(lambda c: c.data.startswith('channel_battles'))
async def show_battles(call: types.CallbackQuery):
    data = call.data.split(';')[-1]

    async with aiosqlite.connect(name_db) as db:
        async with db.execute(f'''SELECT * FROM battles WHERE (channel_id = {data} AND status = 0)''') as cursor:
            battles = await cursor.fetchall()

            kb = InlineKeyboardBuilder()
            for battle in battles:
                kb.button(text=f'{battle[3]}', callback_data=f'chosed_battle;{battle[0]}')

            kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'channelcheckitem;{data}')
            kb.adjust(1)
            await call.message.edit_text(f'''–°–ø–∏—Å–æ–∫ –Ω–∞–±–æ—Ä–æ–≤:''',
                                         reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data.startswith('chosed_battle'))
async def show_current_battle(call: types.CallbackQuery):
    battle_id = call.data.split(';')[-1]
    async with aiosqlite.connect(name_db) as db:
        async with db.execute(f'''SELECT * FROM battles WHERE id = {battle_id}''') as cursor:
            current_battle = await cursor.fetchall()
            current_battle = current_battle[0]

    title = current_battle[3]
    status = current_battle[14]
    channel_id = current_battle[1]
    print(title, status)

    kb = InlineKeyboardBuilder()

    '''–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ'''
    if status:
        kb.button(text=f'‚öîÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞', callback_data=f'updatestatuscatalog;1;{battle_id};0')
    else:
        kb.button(text=f'‚öîÔ∏è –í—ã—Å—Ç–∞–≤–∏—Ç—å –≤ –∫–∞—Ç–∞–ª–æ–≥ "–Ω–∞–±–æ—Ä—ã –Ω–∞ —Ñ–æ—Ç–æ-–±–∞—Ç–ª—ã"', callback_data=f'updatestatuscatalog;1;{battle_id};1')
    kb.button(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–∞—Ç–ª', callback_data=f'updatestatuscatalog;2;{battle_id};0')
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'channel_battles;{channel_id}')
    kb.adjust(1)

    await call.message.edit_text(f'–ë–∞—Ç–ª {title}',
                                 reply_markup=kb.as_markup())

class Form(StatesGroup):
    waiting_for_password = State()
    status:int
    battle_id:int
    typeDo:int

@dp.callback_query(lambda c: c.data.startswith('updatestatuscatalog'))
async def start_password(call: types.CallbackQuery, state: FSMContext):
    data = call.data.split(';')
    Form.status = data[-1]
    Form.battle_id = data[-2]
    Form.typeDo = data[-3]
    await state.set_state(Form.waiting_for_password)
    kb = InlineKeyboardBuilder()
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f'chosed_battle;{call.data.split(";")[-2]}')
    await call.message.edit_text("‚úÖ –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å/–≤—ã—Å—Ç–∞–≤–∏—Ç—å:", reply_markup=kb.as_markup())

@dp.message(Form.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text
    await bot.delete_message(message.chat.id, message.message_id - 1)
    # print("current", current_message)
    await message.delete()

    if password == "1234":
        kb = InlineKeyboardBuilder()
        kb.button(text="üè° –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="tohome")
        await update_status(battle_id=Form.battle_id, status=Form.status, typeDo=Form.typeDo)
        await message.answer("–ë–∞—Ç–ª —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω/—É–¥–∞–ª–µ–Ω", reply_markup=kb.as_markup())
        # update_status()
    else:
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    await state.clear()

@dp.callback_query(lambda c: c.data.startswith('tohome'))
async def go_home(call: types.CallbackQuery):

    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await call.message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{call.message.chat.username}!\n\n",
        reply_markup=dev.start_menu_for_dev(),
        parse_mode='HTML',
        disable_web_page_preview=True)

async def update_status(battle_id, status, typeDo):

    print(battle_id, status)
    async with aiosqlite.connect(name_db) as db:
        if typeDo == "2":
            '''–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã'''
            await db.execute('DELETE FROM battles WHERE id = ?', (battle_id,))
        else:
            await db.execute('UPDATE battles SET status = ? WHERE id = ?', (status, battle_id))
        await db.commit()


@dp.callback_query(lambda c: c.data.startswith('backtochannel_list'))
async def back_to_channel_list_handler(call: types.CallbackQuery):
    page = int(call.data.split(';')[1]) if ';' in call.data else 0
    channels, total_channels = await get_paginated_items34(page)
    categories_kb = await build_items_kb34(channels, page, total_channels)
    await call.message.edit_text(
        text=f"<b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –±–æ—Ç–∞:</b>", reply_markup=categories_kb.as_markup())
    
@dp.callback_query(lambda c: c.data.startswith('cancel_delete_channel'))
async def cancel_delete_channel_handler(call: types.CallbackQuery):
    await battle_check_item_handler(call)

@dp.callback_query(lambda c: c.data.startswith('channel_delete'))
async def back_to_channel_list_handler(call: types.CallbackQuery):
    channel_id = call.data.split(';')[1]
    await call.message.edit_text('–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª?', reply_markup=channels_dev(channel_id))

@dp.callback_query(lambda c: c.data.startswith('channels_deleted_45'))
async def delete_channel_func(call: types.CallbackQuery):
    channel_id = call.data.split(';')[1]
    await call.message.edit_text('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?', reply_markup=true_channels_delete(channel_id))

async def delete_channel_fromlist(call: types.CallbackQuery, channel_id):
    channel_id = call.data.split(';')[1]
    await db.delete_channel_by_id(channel_id)
    tg_id = call.from_user.id
    channels = await db.checkk_all_channels_where_tg_id(tg_id)
    await call.message.edit_text('<b>‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω </b>', reply_markup=channel_is_deletes(channels))

@dp.callback_query(lambda c: c.data.startswith('channel_true'))
async def approve_delete_channel_handler2(callback: types.CallbackQuery):
    channel_id = callback.data.split(';')[1]
    await delete_channel_fromlist(callback, channel_id)

@dp.callback_query(lambda c: c.data.startswith('back_to_channel'))
async def cancel_mailing(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('<b>‚öôÔ∏è–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)</b>')
    
#–í–ö–õ–ê–î–ö–ê üõ†Ô∏è –ù–∞–∫—Ä—É—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤
@dp.message(lambda message: message.text == "üõ†Ô∏è –ù–∞–∫—Ä—É—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤")    
async def handle_profile(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.clear()
        tg_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
        if tg_id in admins:
            await message.answer(
                "<b>–ú–µ–Ω—é –Ω–∞–∫—Ä—É—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤ üõ†Ô∏è</b>",
                reply_markup=nakrutka_menu())
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω
        admin_exist = await db.check_admin_exist_return_bool(tg_id)
        if admin_exist:
            await message.answer(
                "<b>üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.</b>")
            return

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "<b>üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.</b>")
        return
    


#–∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
@dp.callback_query(lambda c: c.data.startswith('addchannel'))
async def add_channel_func(callback_query: types.CallbackQuery, state: FSMContext):
    await cooperation(callback_query.message, state)
    await callback_query.answer()
    
@dp.callback_query(lambda c: c.data == 'addchannel')
async def add_channel_handler(callback: types.CallbackQuery, state: FSMContext):
    await add_channel_func(callback, state)
    
#–ö–ù–û–ü–ö–ê ‚úÖ –ü—Ä–∏—Å—Ç—É–ø–∏–º –ò–ù–¢–ï–†–§–ï–ô–° –°–û–¢–†–£–î–ù–ò–ß–ï–°–¢–í–ê
@dp.message(lambda message: message.text == "‚úÖ –ü—Ä–∏—Å—Ç—É–ø–∏–º")    
async def cooperation(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        tg_id = message.from_user.id
        if tg_id in admins:
            await state.set_state(stats_bot.dev2)
            await message.answer("<b>üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.</b>",)
            return
        admin_exist = await db.check_admin_exist_return_bool(tg_id)
        if admin_exist:
            await state.set_state(stats_bot.admin2)
            await message.answer("<b>üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.</b>",)
            return
    await state.set_state(AddChannel.q1)
    await message.answer(
        "<b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ üìù</b>\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª:\n\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª ‚ûï\n"
        "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ üì≤\n"
        "3. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é üëë", reply_markup=ReplyKeyboardRemove())
@dp.message(AddChannel.q1)
async def add_channel_func(message: types.Message, state: FSMContext, bot: Bot):
    if message.forward_from_chat and message.forward_from_chat.type == 'channel':
        tg_id = message.from_user.id
        channel_id = message.forward_from_chat.id
        channel_title = message.forward_from_chat.title
        try:
            admin_exists = await db.check_admin_exist_return_bool(tg_id)
            if not admin_exists:
                await db.add_admin(tg_id)               
            chat_member = await bot.get_chat_member(channel_id, bot.id)
            if chat_member.status in ['administrator', 'creator']:
                result = await db.add_new_cahnnel_by_chan_id(tg_id, channel_id, channel_title)
                if result is True:
                    await db.add_battles_statistic(tg_id)
                    await message.answer(
                        "<b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ</b>\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ-–±–∞—Ç–ª–æ–≤ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.\n\n"
                        "<u><i>–£–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üòâ</i></u>",reply_markup=admin_kb.start_menu_for_admins())
                else:
                    await message.answer(
                    "<b>–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω! üîÑ</b>\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ç–æ-–±–∞—Ç–ª–æ–≤ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.", reply_markup=admin_kb.start_menu_for_admins())
                    await state.clear()
                    return
                await state.clear()
                return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
    await message.answer(
        "<b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòü</b>\n\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
	#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.callback_query(lambda c: c.data.startswith('nakrutka'))
async def create_mailing(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ tg_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å –≥–æ–ª–æ—Å–∞')
    await state.set_state(AddVoices.q1)

@dp.callback_query(lambda c: c.data.startswith('cancel_nakrutka'))
async def cancel_mailing(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('<b>‚öôÔ∏è–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)</b>')
    
@dp.callback_query(lambda c: c.data.startswith('cancel_menu_channels'))
async def cancel_mailing(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('<b>‚öôÔ∏è–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)</b>')
   
@dp.message(AddVoices.q1)
async def add_voices_handler(message: types.Message, state: FSMContext):
    tg_id = message.text
    if tg_id.isdigit():
        await state.update_data(tg_id=tg_id)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤')
        await state.set_state(AddVoices.q2)
    else:
        await message.answer('–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ tg_id, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

@dp.message(AddVoices.q2)
async def add_voices_handler(message: types.Message, state: FSMContext):
    count = message.text
    if count.isdigit():
        if int(count) >0 and int(count) < 4:
            data = await state.get_data()
            tg_id = data['tg_id']
            await db.add_battle_photos_votes_where_tg_id(tg_id, count)
            await message.answer(f'{count} –≥–æ–ª–æ—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
            await state.clear()
        else:
            await message.answer('–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –Ω–∞—Ä–∫—É—Ç–∏—Ç—å 3 –≥–æ–ª–æ—Å–∞')
    else:
        await message.answer('–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑')

@dp.callback_query(lambda c: c.data.startswith('backtosettings'))
async def option_channel_handler(callback: types.CallbackQuery):
    channel_id = callback.data.split(';')[1] 
    await settings_channel(callback, channel_id)



#–í–ö–õ–ê–î–ö–ê üí¨ –†–∞—Å—Å—ã–ª–∫–∞
@dp.message(lambda message: message.text == "üí¨ –†–∞—Å—Å—ã–ª–∫–∞")    
async def handle_profile(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.clear()
        tg_id = message.from_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
        if tg_id in admins:
            await message.answer(
                "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
                reply_markup=mailing_dev())
            await state.set_state("rassilka.admin_action")
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω
        admin_exist = await db.check_admin_exist_return_bool(tg_id)
        if admin_exist:
            await message.answer(
                "<b>üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.</b>")
            return
        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "<b>üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.</b>")
        return
@dp.callback_query(lambda c: c.data.startswith('cancel_mailing'))
async def cancel_mailing(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('<b>‚öôÔ∏è–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω)</b>') 
@dp.callback_query(lambda c: c.data.startswith('create_mailling'))
async def create_mailing(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
    await state.set_state(Mailing.q1)
@dp.message(Mailing.q1)
async def mailing_handler(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –µ–≥–æ ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(message_id=message.message_id)
    await state.set_state(Mailing.q2)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¢–µ–∫—Å—Ç;—Å—Å—ã–ª–∫–∞ –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã –∫–Ω–æ–ø–∫–∏, —Ç–æ 0')
@dp.message(Mailing.q2)
async def mailing_handler_q2(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    markup = InlineKeyboardBuilder()
    mess_id = user_data['message_id']
    # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –µ–≥–æ ID
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    if message.text.strip() != '0':
        buttons = message.text.strip().split('\n')
        for button in buttons:
            if ';' in button:
                btn_text, btn_url = map(str.strip, button.split(';', 1))       
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ https://
                if btn_url.startswith('https://'):
                    markup.button(text=btn_text, url=btn_url)
                    print('–∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
                else:
                    await message.answer(f"–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'https://'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: {btn_url}")
                    return  # –í–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏
        markup.adjust(1)
    # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å) –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    await send_copy_to_all_users(message.chat.id, mess_id, markup.as_markup())
    await state.clear()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
async def send_copy_to_all_users(chat_id, message_id, reply_markup):
    # –ó–¥–µ—Å—å —É–∫–∞–∂–∏—Ç–µ ID –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–ø–∏—é
    user_ids = await db.get_all_users_tg_id()  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    count = 0
    for user_id in user_ids:
        try:
            await bot.copy_message(
                chat_id=user_id[0],
                from_chat_id=chat_id,
                message_id=message_id,
                reply_markup=reply_markup)
        except Exception as e:
            count +=1
            print(e)
    await db.update_blocked_count(count)
async def send_text_with_buttons_to_all_users(text: str, markup):
    all_users = await db.get_all_users_tg_id()
    if markup is None:
        for user in all_users:
            try:
                await bot.send_message(user[0], text, parse_mode='HTML')
            except Exception as e:
                print(e)
    else:
        for user in all_users:
            try:
                await bot.send_message(user[0], text, reply_markup=markup, parse_mode='HTML')
            except Exception as e:
                print(e)
async def send_photo_with_buttons_to_all_users(photo_id: str, caption: str, markup):
    all_users = await db.get_all_users_tg_id()
    if markup is None:
        for user in all_users:
            try:
                await bot.send_photo(user[0], photo_id, caption=caption, parse_mode='HTML')
            except:
                pass
    else:
        for user in all_users:
            try:
                await bot.send_photo(user[0], photo_id, caption=caption, reply_markup=markup, parse_mode='HTML')
            except:
                pass
            






#–í–ö–õ–ê–î–ö–ê üì± –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç
@dp.message(lambda message: message.text == "üì± –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç")
async def handle_profile(message: types.Message):
    tg_id = message.from_user.id
    profile_info = await db.check_info_users_by_tg_id(tg_id)
    count_wins = await db.check_count_battle_winners_where_tg_id(tg_id)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    profile_message = f"""
<b>üë®‚Äçüíª –í–∞—à –∫–∞–±–∏–Ω–µ—Ç:</b>

<b>üîë –í–∞—à TG ID:</b> <code>{tg_id}</code>

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
    <b>- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –±–∞—Ç–ª–æ–≤:</b> {count_wins[0]}
    <b>- –í—Å–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤:</b> {profile_info[6]}

    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    await message.answer(profile_message, parse_mode="HTML", reply_markup=cabinet_back())
    











#–í–ö–õ–ê–î–ö–ê üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
@dp.message(lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞')
async def statics(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        tg_id = message.from_user.id
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        blocked = await db.check_blocked_count_where_id_1()
        users = await db.check_len_users()
        items = await db.check_all_battles_where_status_1()
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(f"""
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ "–ü–æ–º–æ—â–Ω–∏–∫ —Ñ–æ—Ç–æ-–±–∞—Ç–ª–æ–≤ | –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"</b>\n\n
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ç–ª–æ–≤: {len(items)}\n
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n
- –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–æ –∏–∑ –Ω–∏—Ö –±–æ—Ç–∞: {blocked}\n
<b>‚ÑπÔ∏è –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ</b>
""",reply_markup=statics_back(),parse_mode="HTML",)
        







#–ö–ù–û–ü–ö–ê üîô –ù–∞–∑–∞–¥
@dp.message(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥') 
async def statics(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.clear()
        tg_id = message.from_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
        if tg_id in admins:
            await state.set_state(stats_bot.dev2)
            await message.answer(
                "<b>‚öôÔ∏è–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω):</b>", 
                reply_markup=start_menu_for_dev())
            return
        
		  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω
        admin_exist = await db.check_admin_exist_return_bool(tg_id)
        if admin_exist:
            await state.set_state(stats_bot.admin2)
            await message.answer("<b>‚öôÔ∏è–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>", reply_markup=admin_kb.start_menu_for_admins())
            return
		  # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.username
    await state.set_state(stats_bot.user2)
    await message.answer(
            f" üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n\n"
            "üìñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å <a href='https://telegra.ph/Polzovatelskoe-soglashenie-kanala-PhotoBattliys-10-05'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º</a> –∏ "
            "<a href='https://telegra.ph/Politika-konfidencialnosti-kanala-PhotoBattliys-10-05'>–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>.\n\n"
            "<b>üí¨ –ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>",reply_markup=kb.start_menu_for_users(),parse_mode='HTML',disable_web_page_preview=True)
    










#–í–ö–õ–ê–î–ö–ê üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.message(lambda message: message.text == 'üÜò –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
async def tech_support_start(message: Message, state: FSMContext):
    if message.chat.type == 'private':
        await state.clear()
        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("""
üí¨ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –ú—ã –Ω–µ —Å–º–æ–∂–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–æ–º –∏ –∫–∞–Ω–∞–ª–æ–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞.
            
<i>–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞–ø–∏—Å–∞—Ç—å, –ø—Ä–æ—á—Ç–∏—Ç–µ ‚Äú–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (FAQ)‚Äù</i>
            """, reply_markup=kb.support(), parse_mode="HTML")
        










#–í–ö–õ–ê–î–ö–ê üìö FAQ
@dp.message(lambda message: message.text == 'üìö FAQ')
async def show_faq(message: types.Message, state: FSMContext):
    await message.answer(
    """
‚ùì *–ß—Ç–æ —Ç–∞–∫–æ–µ "–§–æ—Ç–æ–±–∞—Ç–ª—ã"?*
–≠—Ç–æ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –≤ Telegram, –≥–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ—Ä–µ–≤–Ω—É—é—Ç—Å—è –≤ —Ñ–æ—Ç–æ–¥—É—ç–ª—è—Ö.
–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å–≤–æ–∏ –ª—É—á—à–∏–µ —Ñ–æ—Ç–æ –∏ –±–æ—Ä–∏—Ç–µ—Å—å –∑–∞ –ø—Ä–∏–∑—ã!

üåü *–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞.
2. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å—Ç–∞—Ä—Ç–∞ –±–∞—Ç–ª–∞.
3. –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å –∑–∞ –≥–æ–ª–æ—Å–∞ –∑—Ä–∏—Ç–µ–ª–µ–π.

üèÜ *–ö–∞–∫ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—å?*
- –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –Ω–∞–±—Ä–∞–≤—à–∞—è –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤.
- –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.

üí∏ *–ï—Å—Ç—å –ª–∏ –¥–µ–Ω–µ–∂–Ω—ã–µ –∏–≥—Ä—ã?*
–î–∞, –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –∫–æ–Ω–∫—É—Ä—Å—ã —Å –¥–µ–Ω–µ–∂–Ω—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
- *–ê—É–∫—Ü–∏–æ–Ω—ã:* —É—á–∞—Å—Ç–Ω–∏–∫, –ø—Ä–µ–¥–ª–æ–∂–∏–≤—à–∏–π –Ω–∞–∏–±–æ–ª—å—à—É—é —Å—Ç–∞–≤–∫—É, –∑–∞–±–∏—Ä–∞–µ—Ç –≤–µ—Å—å –±–∞–Ω–∫. –≠—Ç–∏ –∏–≥—Ä—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∞–∑–∞—Ä—Ç–Ω—ã–º–∏.

‚ö†Ô∏è *–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —è –ø—Ä–æ–∏–≥—Ä–∞–ª?*
- –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è.
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —É–±—ã—Ç–∫–∏. (–ü—Ä–æ–µ–∫—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è.)

üö™ *–ö–∞–∫ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ?*
- –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø–∏—à–∏—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞, –ª–∏–±–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω—å—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–∞—Ç–ª–∞—Ö.

üìú *–ú–æ–≥—É—Ç –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª–∞?*
–î–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∏–∑–º–µ–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è.
–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –ø–æ—Å—Ç–∞—Ö –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–∞.""",parse_mode="MARKDOWN", reply_markup=faq())
    
    
    
@dp.callback_query(lambda c: c.data.startswith('subcribed'))
async def subcribed_handler(callback: types.CallbackQuery):
    accound_id = callback.data.split(';')[1]
    tg_id = callback.from_user.id
    battle_photos_info = await db.check_battle_photos_where_id1(accound_id)
    battle_id = battle_photos_info[2]
    battle_info = await db.check_battle_info(battle_id)
    channel_link = battle_info[5]
    channel_id = battle_info[1]
    channel_info = await db.check_channel_info_by_id(channel_id)
    channel_tg_id = [channel_info[2]]
    is_exist = await db.check_battle_voices_tg_id_exist_return_bool(tg_id, battle_id)
    if is_exist:
        await callback.answer('üö´ –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ', show_alert=True)
        return
    if await check_sub_cahnnels(channel_tg_id, callback.from_user.id):
        await callback.message.delete()
        await callback.message.answer_photo(photo=battle_photos_info[3], caption='<b>–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å? –ò–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å —É–∂–µ –Ω–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–º</b>', reply_markup=get_my_voice_kb(accound_id))
    else:
        await callback.message.answer("<b>–ß—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª</b>", reply_markup=subscribe_kb(channel_link, accound_id))
        
@dp.callback_query(lambda c: c.data.startswith('getmyvoice'))
async def get_my_voice_handler(callback: types.CallbackQuery, state: FSMContext):
    accound_id = callback.data.split(';')[1]
    tg_id = callback.from_user.id
    battle_photos_info = await db.check_battle_photos_where_id1(accound_id)
    battle_id = battle_photos_info[2]
    battle_info = await db.check_battle_info(battle_id)
    channel_link = battle_info[5]
    channel_id = battle_info[1]
    channel_info = await db.check_channel_info_by_id(channel_id)
    channel_tg_id = [channel_info[2]]
    is_exist = await db.check_battle_voices_tg_id_exist_return_bool(tg_id, battle_id)
    if is_exist:
        await callback.answer('üö´ –í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ', show_alert=True)
        return
    await db.add_one_voice_to_battle_photos_by_id(accound_id)
    await db.update_users_today_voices_and_all_voices(battle_photos_info[1])
    await db.add_new_battle_voices(battle_id, callback.from_user.id)
    await callback.message.answer('<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏</b>')
    time_now = datetime.datetime.now()
    await db.update_last_like(tg_id, time_now.strftime('%Y-%m-%d %H:%M:%S'))
    min_votes = battle_info[11]
    user_votes = battle_photos_info[4]
    