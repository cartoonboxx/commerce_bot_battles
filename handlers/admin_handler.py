from aiogram import types
import asyncio
from data.config import *
from keyboards.another import back_main_menu_add_channel_opt
from test import bot_url
from aiogram import types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from data import loader, config
from database import db
from aiogram.types.input_file import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from states.classes_states import *
from aiogram.types import InputMediaPhoto
from functions.admin_functions import *
from database.db import *
import datetime



dp = Router()
bot = loader.start_bot(config.Token)

def replace_last_digits(url, new_digits):
    # –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "/"
    last_slash_index = url.rfind('/')
    
    # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–∞–π–¥–µ–Ω, –æ—Ç–¥–µ–ª—è–µ–º –≤—Å—ë, —á—Ç–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    if last_slash_index != -1:
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "/" –Ω–∞ –Ω–æ–≤—ã–µ —Ü–∏—Ñ—Ä—ã
        new_url = url[:last_slash_index+1] + str(new_digits)
        return new_url
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç "/", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É
        return url

class AddVoices(StatesGroup):
    q1 = State()
    q2 = State()

class Mailing(StatesGroup):
    q1 = State()
    q2 = State()

async def create_battle(call: types.CallbackQuery, battle_id):
    battle_info = await db.check_battle_info(battle_id)
    post_start_battle = battle_info[17]
    if post_start_battle == 0:
            post_start_battle = '–ù–µ –Ω—É–∂–µ–Ω'
    else:
            post_start_battle = f'–ù—É–∂–µ–Ω'
    await call.message.edit_text(f'''<b>üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ-–±–∞—Ç–ª–∞: (1 –®–ê–ì –ò–ó 2)</b>

- –ù–∞–∑–≤–∞–Ω–∏–µ:  {battle_info[3]}
- –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {battle_info[5]}
- –ü–æ—Å—Ç –æ –Ω–∞—á–∞–ª–µ –±–∞—Ç–ª–∞: {post_start_battle}
- –ü—Ä–∏–∑: {battle_info[6]}
- –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {battle_info[8]}
- –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {battle_info[9]}
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {battle_info[10]}                                                    
''', reply_markup=await create_battle_kb(battle_id, battle_info[5]), disable_web_page_preview=True)
    
@dp.callback_query(lambda c: c.data.startswith('spisokadminov'))
async def admin_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split(';')[1]
    if action == 'mailing':
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        await state.set_state(Mailing.q1)

#–∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
def back_from_addchannel():
    kb = InlineKeyboardBuilder()
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data='back_from_addchannel')
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)

async def settings_channel(callback: types.CallbackQuery, channel_id):
    channel_info = await db.check_channel_info_by_id(channel_id)
    name = channel_info[3]  
    await callback.message.edit_text(f'<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ "{name}"</b>', reply_markup=await back_main_menu_add_channel_opt(channel_id))


@dp.callback_query(lambda c: c.data.startswith('optionchannel'))
async def option_channel_handler(callback: types.CallbackQuery):
    print('–≤–æ—Ç —Ç—É—Ç —á—Ç–æ-—Ç–æ')
    channel_id = callback.data.split(';')[1] 
    await settings_channel(callback, channel_id)
    
@dp.callback_query(lambda c: c.data.startswith('backtocreate'))
async def backtocreate(callback: types.CallbackQuery):
    battle_id = callback.data.split(';')[1] 
    await create_battle(callback, battle_id)


@dp.callback_query(lambda c: c.data.startswith('channelsetting'))
async def channel_setting_handler(callback: types.CallbackQuery, state:FSMContext):
    await state.clear()
    action = callback.data.split(';')[1]
    channel_id = callback.data.split(';')[2]
    await chennelsetting_func(callback,channel_id, action, state )

@dp.callback_query(lambda c: c.data.startswith('approvedelete'))
async def approve_delete_channel_handler(callback: types.CallbackQuery):
    channel_id = callback.data.split(';')[1]
    await delete_channel_func(callback, channel_id)

@dp.callback_query(lambda c: c.data.startswith('2approvedelete'))
async def approve_delete_channel_handler2(callback: types.CallbackQuery):
    channel_id = callback.data.split(';')[1]
    await delete_channel_func2(callback, channel_id)

@dp.callback_query(lambda c: c.data.startswith('battlesettings'))
async def battlesettings(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    action = callback.data.split(';')[1]
    battle_id = callback.data.split(';')[2]

    await battle_settings_func(callback, battle_id,action, state)



@dp.callback_query(lambda c: c.data.startswith('optionactivebattle'))
async def option_active_battle_handler(callback: types.CallbackQuery):
    battle_id = callback.data.split(';')[1]
    await active_battle_func(callback, battle_id)


@dp.callback_query(lambda c: c.data.startswith('activebattlesettings'))
async def active_battle_settings_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    action = callback.data.split(';')[1]
    battle_id = callback.data.split(';')[2]
    await active_battle_options_func(callback, battle_id, action, state)

@dp.callback_query(lambda c: c.data.startswith('saveRoundParam'))
async def saveRoundParam(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data.split(';')
    post = data[-2]
    battle_id = data[-1]
    await state.clear()
    await db.updatePostFieldBattles(post, battle_id)
    await active_battle_func(callback, battle_id)



@dp.callback_query(lambda c: c.data.startswith('approveactivebattlesettings'))
async def approve_active_battle_settings_handler(callback: types.CallbackQuery):
    battle_id = callback.data.split(';')[1]
    await callback.answer('–ë–∞—Ç–ª —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª—Å—è', show_alert=True)
    await db.update_status_battle(battle_id, Status.ENDROUND.value)
    await active_battle_func(callback, battle_id)
    battle_info = await db.check_battle_info(battle_id)
    
    channel_id = battle_info[1]
    channel_info = await db.check_channel_info_by_id(channel_id)
    channel_tg_id = channel_info[2]
    members_in_post = battle_info[13]
    all_battle_users = await db.check_all_battle_photos_where_status_1_and_battle_id(battle_id)
    posts = [all_battle_users[i:i + members_in_post] for i in range(0, len(all_battle_users), members_in_post)]

    count = 0
    
    for index, post in enumerate(posts):
        count+=1
        media_group = []
        for user in post:
            media_photo = InputMediaPhoto(media=user[3])
            media_group.append(media_photo)
              # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        kb = InlineKeyboardBuilder()

        if battle_info[20] == '-':
            text = f'''‚öîÔ∏è <b>{battle_info[7]}</b>
<b>üí∞ –ü–†–ò–ó ‚Äî {battle_info[6]}</b>

<b><a href="https://t.me/{bot_name}?start=b{battle_id}">‚úÖ –ò–î–ï–¢ –ù–ê–ë–û–† –ù–ê –ë–ê–¢–õ –¢–£–¢</a></b>

üìù <b>–£—Å–ª–æ–≤–∏—è:</b> –æ–±–æ–≥–Ω–∞—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏ –Ω–∞–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º {battle_info[11]} –≥–æ–ª–æ—Å–æ–≤
‚è≥<b>–ò—Ç–æ–≥–∏:</b> {battle_info[15]} –ø–æ –ú–°–ö'''
        else:
            text = battle_info[20]
        await asyncio.sleep(5)
        try:
            await bot.send_media_group(chat_id=channel_tg_id, media=media_group)
            
        except Exception:
            await db.update_status_battle(battle_id, Status.Error.value)
            await active_battle_func(callback, battle_id)
            await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª, –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
            
            last_user_id = post[-1][0]
            await db.update_error_number(last_user_id-1, battle_id)
            last_number_post = index + 1
            await db.update_error_post(last_number_post, battle_id)
            return
        
        await asyncio.sleep(5)
        try:
            kb.button(text=f'‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å', url=f'https://t.me/{config.bot_name}?start=vote{battle_id}page{index+1}')
            kb.adjust(1)
            message = await bot.send_message(chat_id=channel_tg_id, text=text, reply_markup=kb.as_markup())
            message_id = message.message_id
            await db.update_id_post(message_id, battle_id)

            
        except Exception:
            await db.update_status_battle(battle_id, Status.Error.value)
            await active_battle_func(callback, battle_id)
            await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª, –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
            
            last_user_id = post[-1][0]
            await db.update_error_number(last_user_id-1, battle_id)
            last_number_post = index + 1
            await db.update_error_post(last_number_post, battle_id)
            return
        post_link = channel_info[6]  # –û—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏
        new_channel_link = replace_last_digits(post_link, str(message_id)) 
        for i, user in enumerate(post, start=1):
            
            await db.update_number_post_in_battle_photos_by_id(user[0], index + 1)
            try:
                kb = InlineKeyboardBuilder()
                kb.button(text='–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç', url=new_channel_link)
                kb.button(text='–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª', url=battle_info[5])
                kb.adjust(1)

                current_battle = await check_battle_info(battle_id)

                if current_battle[22] == 0:
                    await bot.send_message(chat_id=user[1], text=f'''‚úÖ <b>–í–ê–®–ï –§–û–¢–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–û</b>\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ñ–æ—Ç–æ-–±–∞—Ç–ª–µ. –ù–∞–±–∏—Ä–∞–π—Ç–µ –≥–æ–ª–æ—Å–∞ –∏ —É–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ
            ''', disable_web_page_preview=True, reply_markup=kb.as_markup())
                elif current_battle[22] != 0 and current_battle[7] != '–§–∏–Ω–∞–ª':
                    await bot.send_message(chat_id=user[1], text=f'''‚úÖ <b>–í–´ –ü–†–û–®–õ–ò –í –°–õ–ï–î–£–Æ–©–ò–ô –†–ê–£–ù–î</b>\n\n–í—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞—É–Ω–¥. –ù–∞–±–∏—Ä–∞–π—Ç–µ –≥–æ–ª–æ—Å–∞ –∏ —É–≤–∏–¥–∏–º—Å—è –≤ –§–ò–ù–ê–õ–ï
                ''', disable_web_page_preview=True, reply_markup=kb.as_markup())
                if current_battle[7] == "–§–∏–Ω–∞–ª":
                    await bot.send_message(chat_id=user[1], text=f'''‚úÖüí™ <b>–í–´ –í –§–ò–ù–ê–õ–ï</b>\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏ –≤—Å–µ—Ö –Ω–∞ —Å–≤–æ–µ–º –ø—É—Ç–∏ –∏ –æ—Å—Ç–∞–ª–∏—Å—å —Å –Ω–∞–∏—Å–µ–ª—å–Ω–µ–π—à–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏. –ù–∞–±–∏—Ä–∞–π—Ç–µ –≥–æ–ª–æ—Å–∞ –∏ –∑–∞–±–µ—Ä–µ—Ç–µ –ø—Ä–∏–∑.
''', disable_web_page_preview=True, reply_markup=kb.as_markup())

            except Exception as e:
                print(e)
        await db.update_count_in_posts(battle_id, count)

@dp.callback_query(lambda c: c.data.startswith('aprovecontinuebattleesettings'))
async def aprove_continue_battle_handler(callback: types.CallbackQuery):
    battle_id = callback.data.split(';')[1]
    await callback.answer('–ë–∞—Ç–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è', show_alert=True)
    await db.update_status_battle(battle_id, Status.ENDROUND.value)

    await active_battle_func(callback, battle_id)
    battle_info = await db.check_battle_info(battle_id)

    channel_id = battle_info[1]
    channel_info = await db.check_channel_info_by_id(channel_id)
    channel_tg_id = channel_info[2]
    members_in_post = battle_info[13]
    start_error_user_id = battle_info[18]
    all_battle_users = await db.check_all_battle_photos_where_status_1_and_battle_id_bigger_than(battle_id, start_error_user_id)
    posts = [all_battle_users[i:i + members_in_post] for i in range(0, len(all_battle_users), members_in_post)]
    count2 = battle_info[16]
    count = battle_info[19]
    
    for index, post in enumerate(posts, start=count):
        count2+=1
        media_group = []
        for user in post:
            media_photo = InputMediaPhoto(media=user[3])
            media_group.append(media_photo)
              # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        kb = InlineKeyboardBuilder()
        # kb.button(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', callback_data=f'reloadresults;{battle_id};{count}')
        # for i, user in enumerate(post, start=1):
        #     if i == 1:
        #         emoji = '1Ô∏è‚É£'
        #     if i == 2:
        #         emoji = '2Ô∏è‚É£'
        #     if i == 3:
        #         emoji = '3Ô∏è‚É£'
        #     if i == 4:
        #         emoji = '4Ô∏è‚É£'
        #     if i == 5:
        #         emoji = '5Ô∏è‚É£'
        #     if i == 6:
        #         emoji = '6Ô∏è‚É£'
        #     if i == 7:
        #         emoji = '7Ô∏è‚É£'
        #     if i == 8:
        #         emoji = '8Ô∏è‚É£'
        #     if i == 9:
        #         emoji = '9Ô∏è‚É£'
        #     if i == 10:
        #         emoji = 'üîü'
        #     kb.button(text=f'{emoji} {user[4]}', url=f'https://t.me/{config.bot_name}?start={user[0]}')
        kb.button(text=f'‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å', url=f'https://t.me/{config.bot_name}?start=vote{battle_id}')
        kb.adjust(1)
        if battle_info[20] == '-':
            text = f'''‚öîÔ∏è <b>{battle_info[7]}</b>\n<b>üí∞ –ü–†–ò–ó ‚Äî {battle_info[6]}</b>\n\n<b><a href="https://t.me/{bot_name}?start=b{battle_id}">‚úÖ –ò–î–ï–¢ –ù–ê–ë–û–† –ù–ê –ë–ê–¢–õ –¢–£–¢</a></b>\n\nüìù <b>–£—Å–ª–æ–≤–∏—è:</b> –æ–±–æ–≥–Ω–∞—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏ –Ω–∞–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º {battle_info[11]} –≥–æ–ª–æ—Å–æ–≤\n‚è≥<b>–ò—Ç–æ–≥–∏:</b> {battle_info[15]} –ø–æ –ú–°–ö'''
        else:
            text = battle_info[20]
        await asyncio.sleep(5)
        try:
            await bot.send_media_group(chat_id=channel_tg_id, media=media_group)
            
        except Exception:
            await db.update_status_battle(battle_id, Status.Error.value)
            await active_battle_func(callback, battle_id)
            await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª, –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
            last_user_id = post[-1][0]
            await db.update_error_number(last_user_id-1, battle_id)
            last_number_post = index
            await db.update_error_post(last_number_post, battle_id)
            return
            
        
        await asyncio.sleep(5)
        try:
            message = await bot.send_message(chat_id=channel_tg_id, text=text, reply_markup=kb.as_markup())
            message_id = message.message_id
            
        except Exception:
            await db.update_status_battle(battle_id, Status.Error.value)
            await active_battle_func(callback, battle_id)
            await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª, –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')
            
            last_user_id = post[-1][0]
            await db.update_error_number(last_user_id-1, battle_id)
            last_number_post = index
            await db.update_error_post(last_number_post, battle_id)
            return
        post_link = channel_info[6]  # –û—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏
        new_channel_link = replace_last_digits(post_link, str(message_id))  # –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

        for i, user in enumerate(post, start=1):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            individual_channel_link = replace_last_digits(post_link, str(message_id))
            print(f"Generated link for user {user[0]}: {individual_channel_link}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            
            await db.update_number_post_in_battle_photos_by_id(user[0], index)
            try:
                kb = InlineKeyboardBuilder()
                kb.button(text='–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç', url=individual_channel_link)
                await bot.send_message(
                    chat_id=user[1], 
                    text=f'''–í–∞—à–µ —Ñ–æ—Ç–æ –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª - {battle_info[5]}''', 
                    disable_web_page_preview=True, 
                    reply_markup=kb.as_markup()
                )
            except Exception as e:
                print(e)

        await db.update_count_in_posts(battle_id, count2)

@dp.message(Command('database'))
async def send_database_file(message: types.Message):
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if message.from_user.id in config.admins:
        await message.answer_document(FSInputFile('photobattle.db'))
    


@dp.callback_query(lambda c: c.data.startswith('endapproveactivebattle'))
async def end_approve_active_battle_handler(callback: types.CallbackQuery):
    battle_id = callback.data.split(';')[1]
    await callback.answer('–ë–∞—Ç–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è', show_alert=True)
    await db.update_status_battle(battle_id, Status.NEXTROUND.value)
    battle_info = await db.check_battle_info(battle_id)
    
    count = battle_info[16]
    min_voices = battle_info[11]
    
    for i in range(1, count + 1):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
        post = await db.check_battle_photos_by_battle_id_and_number_post(battle_id, i)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
        if not post:
            continue

        # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –≥–æ–ª–æ—Å–∞ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
        eligible_participants = [user for user in post if user[4] >= min_voices]
        
        if not eligible_participants:
            await callback.message.answer(f'–ü–æ—Å—Ç {i}: –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É–≤—à–∏—Ö –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤')
            for user in post:
                await db.delete_user_from_battle_photos(user[0])
            continue
            
        
        max_votes = max(user[4] for user in eligible_participants)
        
        winners = [user for user in eligible_participants if user[4] == max_votes]
        for winner in winners:
            await db.update_battle_photos_votes_and_number_post(winner[0], 0,0)
        for user in post:

            
            if user not in winners:
                
                await db.delete_user_from_battle_photos(user[0])

        if winners:
            # await callback.message.answer(f'–ü–æ—Å—Ç {i}: –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ - {[user[1] for user in winners]} —Å {max_votes} –≥–æ–ª–æ—Å–∞–º–∏')
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f'continueToNextRound;{battle_id}')
            kb.adjust(1)
            await callback.message.answer(f'‚öîÔ∏è –ò—Ç–æ–≥–∏ —Ä–∞—É–Ω–¥–∞: –ø—Ä–æ—Ö–æ–¥–∏—Ç {len(winners)} —á–µ–ª–æ–≤–µ–∫ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥', reply_markup=kb.as_markup())

    await db.update_battles_descr_round_users_min_golos_end_round_by_id(battle_id)
    await db.delete_all_battle_voices_where_battle_id(battle_id)

@dp.callback_query(lambda c: c.data.startswith('continueToNextRound'))
async def continueToNextRound(call: types.CallbackQuery):

    battle_id = call.data.split(';')[-1]

    battle_info = await db.check_battle_info(battle_id)
    current_round = battle_info[22]
    print('current round', current_round)
    await db.update_number_round(current_round + 1, battle_id)

    await active_battle_answer_func(call.message, battle_id)


@dp.callback_query(lambda c: c.data.startswith('secapprovedeletebattle'))
async def approve_delete_battle_handler(callback: types.CallbackQuery):
    battle_id = callback.data.split(';')[1]
    await db.delete_battle_by_id(battle_id)
    await callback.message.edit_text('<b>‚úÖ –ë–∞—Ç–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ü–æ—Å—Ç—ã —Å –±–∞—Ç–ª–∞–º–∏ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è. </b>')



async def build_keyboard(post, battle_id, count, current_page):
    kb = InlineKeyboardBuilder()
    if len(post) == 0:
        kb.button(text='–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚òëÔ∏è', callback_data=f'sfanfjsjfsajfiajs')
    else:
        kb.button(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã', callback_data=f'reloadresults;{battle_id};{count};{current_page}')
        for i, user in enumerate(post, start=1):
            if i == 1:
                emoji = '1Ô∏è‚É£'
            if i == 2:
                emoji = '2Ô∏è‚É£'
            if i == 3:
                emoji = '3Ô∏è‚É£'
            if i == 4:
                emoji = '4Ô∏è‚É£'
            if i == 5:
                emoji = '5Ô∏è‚É£'
            if i == 6:
                emoji = '6Ô∏è‚É£'
            if i == 7:
                emoji = '7Ô∏è‚É£'
            if i == 8:
                emoji = '8Ô∏è‚É£'
            if i == 9:
                emoji = '9Ô∏è‚É£'
            if i == 10:
                emoji = 'üîü'
            kb.button(text=f'{emoji} - {user[4]}', callback_data=f"voteby;{battle_id};{user[0]}")
        # kb.button(text=f'‚úÖ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å', url=f'https://t.me/{config.bot_name}?start=vote{battle_id}')
        kb.adjust(1, 2, 3, 4)
    return kb

@dp.callback_query(lambda c: c.data.startswith('reloadresults'))
async def reload_results_handler(callback: types.CallbackQuery):
    print(callback.data.split(';'))
    battle_id = callback.data.split(';')[1]
    count = int(callback.data.split(';')[2])
    page = int(callback.data.split(';')[3])

    all_photos = await db.all_photo_by_battle(battle_id)
    current_medias = []
    for i in range((page - 1) * count, page * count):
        current_medias.append(all_photos[i])
    
    kb = await build_keyboard(current_medias, battle_id, count, page)
    try:
        await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    except Exception as e:
        print(e)

@dp.callback_query(lambda c: c.data.startswith('firstround;iagree'))
async def firstround_createbattle_continue(call: types.CallbackQuery, state: FSMContext):
    battle_id = call.data.split(';')[-1]
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª(–∞)", callback_data=f"firstround;publish;{battle_id}")
    kb.adjust(1)
    await call.message.edit_text('''<b>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ</b>\n\n–ü–æ—Å—Ç—ã –±—É–¥—É—Ç –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –æ–¥–æ–±—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–º —à–∞–≥–µ –≤ –ø–æ–ª–µ ¬´–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–æ—Å—Ç–µ¬ª''', reply_markup=kb.as_markup())

@dp.callback_query(lambda c: c.data.startswith('firstround;publish'))
async def firstround_createbattle_publish(callback: types.CallbackQuery, state: FSMContext):
    battle_id = callback.data.split(';')[-1]

    battle_info = await db.check_battle_info(battle_id)

    await callback.message.edit_text('<b>‚úÖ –ë–∞—Ç–ª —Å–æ–∑–¥–∞–Ω </b> \n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ‚öîÔ∏è –ù–∞–±–æ—Ä—ã –Ω–∞ —Ñ–æ—Ç–æ-–±–∞—Ç–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É')

    tg_id = callback.from_user.id
    await db.update_battle_statistic_plus_1(tg_id)
    await db.update_admin_count_minus_1(tg_id)
    channel_id = battle_info[1]
    channel_info = await db.check_channel_info_by_id(channel_id)
    channel_tg_id = channel_info[2]
    kb = InlineKeyboardBuilder()
    kb.button(text='–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', url=f'https://t.me/{config.bot_name}?start=b{battle_id}')
    try:
        post_id = battle_info[17]
        if post_id is not None:
            await bot.copy_message(chat_id=channel_tg_id, from_chat_id=callback.message.chat.id,
                               message_id=battle_info[17], reply_markup=kb.as_markup()
                               )



    except Exception as e:
        print(e)
        await callback.message.answer('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –æ –±–∞—Ç–ª–µ')


@dp.callback_query(lambda c: c.data.startswith('firstround;createbattle'))
async def start_first_round(call: types.CallbackQuery, state: FSMContext):
    battle_id = call.data.split(';')[-1]
    battle_info = await db.check_battle_info(battle_id)

    if battle_info[13] == 0 or battle_info[11] == 0 or battle_info[15] == '-':
        await call.answer('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', show_alert=True)
        return

    # await db.update_status_battle(battle_id, Status.ENDROUND.value)
    post_id = battle_info[17]
    if post_id is not None:
        kb = InlineKeyboardBuilder()
        kb.button(text='‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data=f"firstround;iagree;{battle_id}")
        kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=f"firstround;returnstep2;{battle_id}")
        kb.adjust(1)

        await call.message.edit_text(text=f'''<b>–î–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å —Ñ–æ—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üì∑</b>\n\n<i><b>‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ? –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞, —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞ –ø–æ–º–µ–Ω—è—Ç—å –Ω–µ —Å–º–æ–∂–µ—Ç–µ</b></i>
        ''', reply_markup=kb.as_markup())
    else:
        await call.message.edit_text('<b>‚úÖ –ë–∞—Ç–ª —Å–æ–∑–¥–∞–Ω </b> \n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ‚öîÔ∏è –ù–∞–±–æ—Ä—ã –Ω–∞ —Ñ–æ—Ç–æ-–±–∞—Ç–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É')

@dp.callback_query(lambda c: c.data.startswith('firstround;returnstep2'))
async def return_step_2_page_battle(call: types.CallbackQuery, state: FSMContext):
    battle_id = call.data.split(';')[-1]
    await call.message.delete()
    await firstround_menu_setting(call.message, battle_id)

@dp.callback_query(lambda c: c.data.startswith('firstround;users_in_post'))
async def set_users_in_post(call: types.CallbackQuery, state: FSMContext):
    battle_id = call.data.split(';')[-1]

    await call.message.edit_text(
            '<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –≤ –æ–¥–Ω–æ–º –ø–æ—Å—Ç–µ –æ—Ç 2 –¥–æ 10.</b> \n\n–£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.',
    reply_markup=await kb_return_2page_battlecreate(battle_id))
    await state.set_state(AddActiveBattleParticipants.q1)
    await state.update_data(battle_id=battle_id)
    await state.update_data(round=1)

@dp.callback_query(lambda c: c.data.startswith('firstround;end_time_round'))
async def set_end_time_round(call: types.CallbackQuery, state: FSMContext):
    battle_id = call.data.split(';')[-1]

    await call.message.edit_text(
        '<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ‚Äú—Å–µ–≥–æ–¥–Ω—è –≤ 12:00"</b>\n\n–£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.',
    reply_markup=await kb_return_2page_battlecreate(battle_id))
    await state.set_state(AddActiveBattleEnd.q1)
    await state.update_data(battle_id=battle_id)
    await state.update_data(round=1)

@dp.callback_query(lambda c: c.data.startswith('firstround;min_votes_win'))
async def set_min_votes_win(call: types.CallbackQuery, state: FSMContext):
    battle_id = call.data.split(';')[-1]

    await call.message.edit_text(
        '<b>‚öôÔ∏è –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–±–µ–¥—ã –≤ —Ä–∞—É–Ω–¥–µ.</b>\n\n–ü–æ–±–µ–¥–∞ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–±—Ä–∞–ª –º–∏–Ω–∏–º–∞–ª–∫—É –∏ –æ–±–æ–≥–Ω–∞–ª —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤.',
    reply_markup=await kb_return_2page_battlecreate(battle_id))
    await state.set_state(AddVoicesToWin.q1)
    await state.update_data(battle_id=battle_id)
    await state.update_data(round=1)

@dp.callback_query(lambda c: c.data.startswith('firstround;returnback'))
async def firstround_menu_returnback(call: types.CallbackQuery, state: FSMContext):
    battle_id = call.data.split(';')[-1]

    battle_info = await db.check_battle_info(battle_id)
    channel_id = battle_info[1]
    post_start_battle = battle_info[17]
    channel_info = await db.check_channel_info_by_id(channel_id)
    channel_tg_id = channel_info[5]
    time_now = datetime.datetime.now().strftime("%H:%M")

    await db.update_battle_channel_link_by_battle_id(battle_id, channel_tg_id)
    if post_start_battle == 0:
        post_start_battle = '–ù–µ –Ω—É–∂–µ–Ω'
    else:
        post_start_battle = f'–ù—É–∂–µ–Ω'

    await call.message.edit_text(f'''<b>üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ-–±–∞—Ç–ª–∞: (1 –®–ê–ì –ò–ó 2)</b>

- –ù–∞–∑–≤–∞–Ω–∏–µ:  {battle_info[3]}
- –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {channel_tg_id}
- –ü–æ—Å—Ç –æ –Ω–∞—á–∞–ª–µ –±–∞—Ç–ª–∞: {post_start_battle}
- –ü—Ä–∏–∑: {battle_info[6]}
- –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time_now}
- –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {battle_info[9]}
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {battle_info[10]}                                                    
    ''', reply_markup=await create_battle_kb(battle_id, channel_id), disable_web_page_preview=True)


    

